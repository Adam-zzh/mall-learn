1.学习文档：http://www.macrozheng.com
           https://github.com/macrozheng/mall

2.PagerHelper MyBatis分页插件，简单的几行代码就能实现分页，在与SpringBoot整合时，只要整合了PagerHelper就自动整合了MyBatis。
PageHelper.startPage(pageNum, pageSize);
//之后进行查询操作将自动进行分页
List<PmsBrand> brandList = brandMapper.selectByExample(new PmsBrandExample());
//通过构造PageInfo对象获取分页信息，如当前页码，总页数，总条数
PageInfo<PmsBrand> pageInfo = new PageInfo<PmsBrand>(list);
3.generator逆向出现resource属性指定的配置文件不存在  因为在pom文件中没有指定资源路径 在pom文件的build中添加资源定位

用的updateByExampleSelective，更新的时候只会更新divChangeStatus这个字段，但是如果用updateByExample，其他的字段都会设置为Null！太恐怖了，用了不当，就会导致灾难性的后果，所以，只建议用updateByExampleSelective这个，不要用updateByExample！

更新Blob类型字段要用updateByPrimaryKeyWithBLOBs  不然不会报错也不会更新
4.datasource配置的url属性没有读取到的原因可能是配置 spring - datasource - url的文件没有加载. 解决在pom文件中build-》resources-》resource 添加yml释放
5. Swagger-UI是HTML, Javascript, CSS的一个集合，可以动态地根据注解生成在线API文档。
6. Swagger-UI常用注解  Swagger:大摇大摆
  @Api：用于修饰Controller类，生成Controller相关文档信息
  @ApiOperation：用于修饰Controller类中的方法，生成接口方法相关文档信息
  @ApiParam：用于修饰接口中的参数，生成接口参数相关文档信息
  @ApiModelProperty：用于修饰实体类的属性，当实体类是请求参数或返回结果时，直接生成相关文档信息
7.访问Swagger-UI接口文档地址(运行项目)
  接口地址：http://localhost:8080/swagger-ui.html
8.JWT是JSON WEB TOKEN的缩写，它是基于 RFC 7519 标准定义的一种可以安全传输的的JSON对象，由于使用了数字签名，所以是可信任和安全的。

  JWT的组成
    JWT token的格式：header.payload.signature
    header中用于存放签名的生成算法
    {"alg": "HS512"}
    payload中用于存放用户名、token的生成时间和过期时间
    {"sub":"admin","created":1489079981393,"exp":1489684781}
    signature为以header和payload生成的签名，一旦header和payload被篡改，验证将失败
    //secret为加密算法的密钥
    String signature = HMACSHA512(base64UrlEncode(header) + "." +base64UrlEncode(payload),secret)

    例如：eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImNyZWF0ZWQiOjE1NTY3NzkxMjUzMDksImV4cCI6MTU1NzM4MzkyNX0.d-iki0193X0bBOETf2UN3r3PotNIEAV7mzIxxeI5IxFyzzkOZxS0PGfF_SK6wxCv2K8S0cZjMkv6b5bCqc0VBw

  JWT实现认证和授权的原理
    用户调用登录接口，服务器校验通过，生成JWT，不保存JWT，直接返回给客户端
    客户端将JWT存入cookie或者localStorage
    之后用户每次调用接口都在http的header中添加一个叫Authorization的头，值为JWT的token；
    后台程序通过对Authorization头中信息的解码及数字签名校验来获取其中的用户信息，从而实现认证和授权。

    你可以把它放在Cookie里面自动发送，但是这样不能跨域，所以更好的做法是放在HTTP请求的头信息Authorization字段里面。
    Authorization: Bearer <token>
9.
    ums_admin：后台用户表
    ums_role：后台用户角色表
    ums_permission：后台用户权限表
    ums_admin_role_relation：后台用户和角色关系表，用户与角色是多对多关系
    ums_role_permission_relation：后台用户角色和权限关系表，角色与权限是多对多关系
  * ums_admin_permission_relation：后台用户和权限关系表(除角色中定义的权限以外的加减权限)，加权限是指用户比角色多出的权限，减权限是指用户比角色少的权限
10.EnableWebSecurity: spring Security用于启用Web安全的注解
   @EnableGlobalMethodSecurity(prePostEnabled=true) Spring Security默认是禁用注解的，要想开启注解， 需要在继承WebSecurityConfigurerAdapter的类上加@EnableGlobalMethodSecurity注解， 来判断用户对某个控制层的方法是否具有访问权限 
11.spring security相关配置方法说明
    configure(HttpSecurity httpSecurity)：用于配置需要拦截的url路径、jwt过滤器及出异常后的处理器；
    configure(AuthenticationManagerBuilder auth)：用于配置UserDetailsService及PasswordEncoder；
    RestfulAccessDeniedHandler：当用户没有访问权限时的处理器，用于返回JSON格式的处理结果；
    RestAuthenticationEntryPoint：当未登录或token失效时，返回JSON格式的结果；
    UserDetailsService:SpringSecurity定义的核心接口，用于根据用户名获取用户信息，需要自行实现；
    UserDetails：SpringSecurity定义用于封装用户信息的类（主要是用户信息和权限），需要自行实现；
    PasswordEncoder：SpringSecurity定义的用于对密码进行编码及比对的接口，目前使用的是BCryptPasswordEncoder；
    JwtAuthenticationTokenFilter：在用户名和密码校验前添加的过滤器，如果有jwt的token，会自行根据token信息进行登录。
12.流式写法
   permissions.stream()
    .filter(permission -> permission.getValue()!=null)
    .map(permission -> new SimpleGrantedAuthority(permission.getValue()))
    .collect(Collectors.toList())
13. Java 8 中我们可以通过 `::` 关键字来访问类的构造方法，对象方法，静态方法
Java8允许开发者通过使用关键字 default 向接口中加入非抽象方法。
函数式接口
    @FunctionalInterface
    interface IConvert<F, T> {
        T convert(F form);
    }

    IConvert<String, String> convert = Something::startsWith;//函数接口只允许有一个抽象接口，赋值就是实现抽象方法
    String converted = convert.convert("123");
14.把us拷贝到us1，忽略us中属性为空的值
BeanUtil.copyProperties(us, us1, CopyOptions.create().setIgnoreNullValue(true));
15.Spring Security使用一个Authentication对象来描述当前用户的相关信息 而SecurityContext持有的是代表当前用户相关信息的Authentication的引用。
SecurityContextHolder.getContext().getAuthentication()
SecurityContextHolder 借助ThreadLocal来保存和传递用户登录信息

16.
@PreAuthorize:可以用来控制一个方法是否能够被调用。 @PreAuthorize("#id<10") @PreAuthorize("hasRole('ROLE_USER') or hasRole('ROLE_ADMIN')")  @PreAuthorize("#user.name.equals('abc')")
@PostAuthorize:在方法调用完之后进行权限检查

使用@PreFilter和@PostFilter进行过滤 可以对集合类型的参数或返回值进行过滤 将移除使对应表达式的结果为false的元素

  @PreFilter(filterTarget="ids", value="filterObject%2==0") filterObject代表filterTarget指定的参数
  @PostFilter("filterObject.id%2==0"） filterObject代表返回值
17.
<T> void fromArrayToCollection
void fromArrayToCollection
第一个方法相当于为该方法声明了一个类型为T的类，这个方法放到任意一个类中都不会报错的。
第二个方法相当于没有声明类型为T的类，这时必须在类上面加上泛型T，不然这个方法会报错的。
18.ElasticSearch
使用@Query注解可以用Elasticsearch的DSL语句进行查询 分为字段类查询（match对查询值进行分词 默认是或的关系，tearm不会分词）和复合类查询（bool）
DSL语句：https://blog.csdn.net/fanrenxiang/article/details/86477019
Elasticsearch Nested类型深入详解: https://blog.csdn.net/laoyang360/article/details/82950393
 type ==》类型 ==》相当于Mysql中的一张表，存储json类型的数据
 document  ==》文档 ==》一个文档相当于Mysql一行的数据
 field ==》列 ==》相当于mysql中的列，也就是一个属性
19.
死信队列的使用感悟
 超时会将该队列的信息发送给x-dead-letter-exchange交换机，死信的路由键为x-dead-letter-routing-key
 我只需要消费真正队列就可以


